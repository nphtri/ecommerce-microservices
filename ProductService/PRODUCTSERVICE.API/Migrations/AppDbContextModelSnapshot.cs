// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PRODUCTSERVICE.API.Data;

namespace PRODUCTSERVICE.API.Migrations
{
  [DbContext(typeof(AppDbContext))]
  partial class AppDbContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Relational:MaxIdentifierLength", 128)
          .HasAnnotation("ProductVersion", "5.0.10")
          .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Art", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<int>("ArtistId")
                      .HasColumnType("int")
                      .HasColumnName("artist_id");

            b.Property<int?>("CollectionId")
                      .HasColumnType("int")
                      .HasColumnName("collection_id");

            b.Property<DateTime>("CreatedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("created_time");

            b.Property<string>("Description")
                      .IsRequired()
                      .HasColumnType("nvarchar(MAX)")
                      .HasColumnName("description");

            b.Property<string>("Image")
                      .IsRequired()
                      .HasColumnType("varchar(200)")
                      .HasColumnName("image");

            b.Property<DateTime>("ModifiedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("modified_time");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("name");

            b.Property<string>("Short")
                      .HasColumnType("nvarchar(500)")
                      .HasColumnName("short");

            b.Property<int>("StyleId")
                      .HasColumnType("int")
                      .HasColumnName("style_id");

            b.HasKey("Id");

            b.HasIndex("ArtistId");

            b.HasIndex("CollectionId");

            b.HasIndex("StyleId");

            b.ToTable("arts");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.ArtCollection", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<DateTime>("CreatedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("created_time");

            b.Property<string>("Description")
                      .IsRequired()
                      .HasColumnType("nvarchar(MAX)")
                      .HasColumnName("description");

            b.Property<string>("Image")
                      .IsRequired()
                      .HasColumnType("varchar(200)")
                      .HasColumnName("image");

            b.Property<DateTime>("ModifiedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("modified_time");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("name");

            b.Property<DateTime>("PublishedDate")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("published_date");

            b.Property<string>("Publisher")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("publisher");

            b.HasKey("Id");

            b.ToTable("art_collections");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Artist", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("Avatar")
                      .IsRequired()
                      .HasColumnType("varchar(200)")
                      .HasColumnName("avatar");

            b.Property<string>("Biography")
                      .HasColumnType("nvarchar(MAX)")
                      .HasColumnName("biography");

            b.Property<DateTime>("CreatedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("created_time");

            b.Property<string>("Email")
                      .IsRequired()
                      .HasColumnType("varchar(30)")
                      .HasColumnName("email");

            b.Property<string>("Facebook")
                      .HasColumnType("varchar(50)")
                      .HasColumnName("facebook");

            b.Property<string>("FirstName")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("first_name");

            b.Property<string>("Instagram")
                      .HasColumnType("varchar(50)")
                      .HasColumnName("instagram");

            b.Property<string>("LastName")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("last_name");

            b.Property<DateTime>("ModifiedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("modified_time");

            b.Property<string>("Nickname")
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("nickname");

            b.Property<string>("Phone")
                      .IsRequired()
                      .HasColumnType("varchar(15)")
                      .HasColumnName("phone");

            b.HasKey("Id");

            b.ToTable("artists");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Banner", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<DateTime>("CreatedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("created_time");

            b.Property<string>("Description")
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("description");

            b.Property<string>("Image")
                      .IsRequired()
                      .HasColumnType("varchar(200)")
                      .HasColumnName("image");

            b.Property<bool>("IsActive")
                      .HasColumnType("bit")
                      .HasColumnName("is_active");

            b.Property<DateTime>("ModifiedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("modified_time");

            b.Property<int>("OrderIndex")
                      .HasColumnType("int")
                      .HasColumnName("order_index");

            b.Property<string>("TargetUrl")
                      .HasColumnType("varchar(200)")
                      .HasColumnName("target_url");

            b.HasKey("Id");

            b.ToTable("banners");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Lookup", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<int>("LookupTypeId")
                      .HasColumnType("int")
                      .HasColumnName("lookup_type_id");

            b.Property<string>("Value")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("value");

            b.HasKey("Id");

            b.HasIndex("LookupTypeId");

            b.ToTable("lookups");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.LookupType", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<string>("Value")
                      .IsRequired()
                      .HasColumnType("nvarchar(200)")
                      .HasColumnName("value");

            b.HasKey("Id");

            b.ToTable("lookup_types");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Product", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int")
                      .HasColumnName("id")
                      .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            b.Property<int?>("ArtId")
                      .HasColumnType("int")
                      .HasColumnName("art_id");

            b.Property<DateTime>("CreatedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("created_time");

            b.Property<string>("Description")
                      .IsRequired()
                      .HasColumnType("nvarchar(MAX)")
                      .HasColumnName("description");

            b.Property<string>("Image")
                      .IsRequired()
                      .HasColumnType("varchar(200)")
                      .HasColumnName("image");

            b.Property<DateTime>("ModifiedTime")
                      .HasColumnType("datetime2(7)")
                      .HasColumnName("modified_time");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("nvarchar(500)")
                      .HasColumnName("name");

            b.Property<double>("Price")
                      .HasColumnType("float")
                      .HasColumnName("price");

            b.Property<int>("TypeId")
                      .HasColumnType("int")
                      .HasColumnName("type_id");

            b.HasKey("Id");

            b.HasIndex("ArtId");

            b.HasIndex("TypeId");

            b.ToTable("products");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Art", b =>
          {
            b.HasOne("PRODUCTSERVICE.API.Models.Artist", "Artist")
                      .WithMany("Arts")
                      .HasForeignKey("ArtistId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("PRODUCTSERVICE.API.Models.ArtCollection", "Collection")
                      .WithMany("Arts")
                      .HasForeignKey("CollectionId");

            b.HasOne("PRODUCTSERVICE.API.Models.Lookup", "ArtStyle")
                      .WithMany("ArtsByStyle")
                      .HasForeignKey("StyleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Artist");

            b.Navigation("ArtStyle");

            b.Navigation("Collection");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Lookup", b =>
          {
            b.HasOne("PRODUCTSERVICE.API.Models.LookupType", "LookupType")
                      .WithMany("Lookups")
                      .HasForeignKey("LookupTypeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("LookupType");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Product", b =>
          {
            b.HasOne("PRODUCTSERVICE.API.Models.Art", "Art")
                      .WithMany("Products")
                      .HasForeignKey("ArtId");

            b.HasOne("PRODUCTSERVICE.API.Models.Lookup", "ProductType")
                      .WithMany("ProductsByType")
                      .HasForeignKey("TypeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Art");

            b.Navigation("ProductType");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Art", b =>
          {
            b.Navigation("Products");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.ArtCollection", b =>
          {
            b.Navigation("Arts");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Artist", b =>
          {
            b.Navigation("Arts");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.Lookup", b =>
          {
            b.Navigation("ArtsByStyle");

            b.Navigation("ProductsByType");
          });

      modelBuilder.Entity("PRODUCTSERVICE.API.Models.LookupType", b =>
          {
            b.Navigation("Lookups");
          });
#pragma warning restore 612, 618
    }
  }
}
